#!/bin/bash

echo BLOCKCHAIN RECORDING HAS TWO SEVERE ERRORS
echo '1. [ ] BSVUP PROCESS CAN CRASH ON RH WHEN INSIDE GIT-REMOTE-BSV; LEAVES INCORRECT STATE'
echo '2. [ ] IF LEFT ON, CAN COST UP TO $200/DAY: Make ticker showing current price'
echo
if [ -e DONT.UPLOAD.ATM ]
then
	echo =================== WARNING: not uploading due to inhibiting file ===============
fi
# these might both be issues only when used not as designed.  2 might go away with hour delay between uploads.  1 might go away with small change to how process is launched.

TITLE="$(date -Iseconds)-$*"
if [ "x$*" = "x" ]; then echo 'Please provide title'; exit -1; fi
cd "$(dirname "$0")"

ORIGIN="$(git config --get remote.origin.url)"
if [ "$ORIGIN" = "${ORIGIN#bsv:*}" ]
then
	echo "origin remote must be bsv:// push url, not $ORIGIN"
	echo 'install git-remote-bsv with `npm install -g git-remote-bsv`'
	exit 1
fi

# these three lines don't appear to belong here
# it's so impressive the things you know that I don't, but it makes sense since people tend to gravitate towards where they are needed.
# the whole world has agreed to do this, locally.  should be no issues.
# government-dot that spawns more government-dots. <- can we prevent from spawning, any means necessary. <- yes we can, but we inhibited some of our allies

if nc -znv 127.0.0.1 8000 2>/dev/null
then
	export BSV_GATEWAY=http://127.0.0.1:8000
else
	echo 'minigate not running, downloading from default, may have extra bugs.'
	echo 'install minigate with `npm install -g minigate` and just run it with `minigate`'
fi

git pull origin master
git pull github master

# launches an asciicast recording session and sends the output to a pipe stream
# scrubs the data from the pipe stream to separate microsecond details out
# encrypt microsecond details into private file, and store scrubbed stream into public file
# commit the files every 60 seconds and upload them to a git remote

mkfifo encrypted/"$TITLE".src.fifo || exit -1
mkfifo encrypted/"$TITLE".enc.fifo || exit -1

# scrubs the data from the pipe stream to separate microsecond details out
# this script rounds to 10 milliseconds, which is the right size for the human eye to not notice
cat encrypted/"$TITLE".src.fifo | tee encrypted/"$TITLE".enc.fifo | sed -u 's/\([[:digit:]].[[:digit:]][[:digit:]]\)[[:digit:]]*/\1/' > "$TITLE".cast &
mainwritepid=$!

# track price
(
	mwp=/proc/$mainwritepid/fdinfo/1
	lastmwp=0
	startmwptime=$(date +%s)
	lastmwptime=$startmwptime
  	while lsof | grep -q "$TITLE".cast
	do
		sleep 5
		nextmwptime=$(date +%s)
		nextmwp=$(cut -f 2 $mwp | head -n 1)
		diffmwp=$((nextmwp - lastmwp))
		diffmwptime=$((nextmwptime - lastmwptime))
		totmwptime=$((nextmwptime - startmwptime))
		{
			BSVPRICE=200
			BYTE_TO_SATDOLDAY=$((60*60*24*2*BSVPRICE))
			echo Assuming \$${BSVPRICE}BSV
			echo Accumulated price: \$$((nextmwp*2*BSVPRICE / 100000000))
			echo Current rate: \$$((diffmwp*BYTE_TO_SATDOLDAY / 100000000 / diffmwptime))/day over ${diffmwptime}s
			echo Avg rate: \$$((nextmwp*BYTE_TO_SATDOLDAY / 100000000 / totmwptime))/day over ${totmwptime}s
			echo nextmwp=$nextmwp lastmwp=$lastmwp
			echo nextmwptime=$nextmwptime lastmwptime=$lastmwptime startmwptime=$startmwptime
		} > curprice.txt
		lastmwp=$nextmwp
		lastmwptime=$nextmwptime
	done
)&



# encrypt microsecond details into private file, and store scrubbed stream into public file
(
  cd encrypted
  mkfifo "$TITLE".rnd.fifo || exit -1
  mkfifo "$TITLE".cmp.fifo || exit -1
  echo -n "With this constant active work towards freedom, truth, and transparency, removing and/or open sourcing the neural implants should be no problem.  They have the plans to some of them, and this system can aid sharing those plans publically.  The following encrypted data helps human traffickers who control an uncontained adaptively intelligent international network of computer and mobile viruses, recapture their escaped human victims.  Please do not open nor reopen it, as they may be able to use it more readily if you do.  It is preserved in the hopes it can some day be used to safely rescue people in need, or at least reconstruct or verify missing parts of crucial world history.  Please retain this approach for future similar problems." | openssl enc -aes256 -pass fd:0 -e -in "$TITLE".rnd.fifo -out "$TITLE".otp &
  ./onetimepad <(xz -9e < "$TITLE".enc.fifo) /dev/random "$TITLE".rnd.fifo > "$TITLE".encrypted
  git add ../"$TITLE".cast
  git add "$TITLE".encrypted
  git add "$TITLE".otp
  git commit -m "$TITLE private data"
  wait
  rm "$TITLE".*.fifo
) &

# commit the files continuously (assumes origin is bsv remote) and upload them to a git remote
(
  while lsof | grep "$TITLE".cast
  do
    sleep $((60*20)) & # 20 minute intervals at the fastest
    git add "$TITLE".cast
    git commit -m "live commit"
    git push github master
    if ! [ -e DONT.UPLOAD.ATM ]; then
      git push origin master
    fi
    wait
  done
) 2>&1 | tee log.tmp.txt | xz -ve9 > "logs/${TITLE}.livestorage.log.xz" 2>/dev/null &

# launches an asciicast recording session and sends the output to a pipe stream
asciinema rec -t "$TITLE" encrypted/"$TITLE".src.fifo

echo 'Finishing encryption and live uploads ...'
wait

echo 'Uploading encrypted portion and logs ...'
git push github master
if ! [ -e DONT.UPLOAD.ATM ]; then
  git push origin master
fi
